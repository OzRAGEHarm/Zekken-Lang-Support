{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "fileTypes": ["zk"],
  "patterns": [
    {
      "name": "comment.line.double-slash.zekken",
      "match": "//.*$"
    },
    {
      "name": "comment.block.zekken",
      "begin": "/\\*",
      "end": "\\*/"
    },

    {
      "name": "storage.type.zekken support.type.primitive.zekken",
      "match": "\\b(int|float|bool|string|arr|obj|fn)\\b"
    },

		{
      "name": "meta.function.declaration.zekken",
      "match": "\\b(func)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\|",
      "captures": {
        "1": { "name": "keyword.other.zekken" },
        "2": { "name": "entity.name.function.zekken" }
      }
    },

    {
      "name": "meta.function.lambda.declaration.zekken",
      "match": "\\b(let|const)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*:\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*->",
      "captures": {
        "1": { "name": "keyword.other.zekken" },
        "2": { "name": "entity.name.function.zekken" },
        "3": { "name": "storage.type.zekken support.type.primitive.zekken" }
      }
    },

    {
      "name": "support.function.builtin.zekken",
      "match": "(?<=@)([a-zA-Z_][a-zA-Z0-9_]*)(?=\\s*=>)",
      "captures": {
        "1": { "name": "keyword.other.zekken" }
      }
    },

    {
      "name": "meta.function.call.zekken",
      "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(=>)",
      "captures": {
        "1": { "name": "entity.name.function.zekken" },
        "2": { "name": "keyword.operator.zekken" }
      }
    },

    {
      "name": "keyword.control.zekken",
      "match": "\\b(if|else|for|while|try|catch|return)\\b"
    },

    {
      "name": "keyword.other.zekken",
      "match": "\\b(use|include|export|func|let|const|from|in)\\b"
    },

    {
      "name": "variable.other.zekken",
      "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
    },

    {
      "name": "constant.numeric.integer.zekken",
      "match": "\\b\\d+\\b"
    },
    {
      "name": "constant.numeric.float.zekken",
      "match": "\\b\\d+\\.\\d+\\b"
    },
    {
      "name": "constant.language.boolean.zekken",
      "match": "\\b(true|false)\\b"
    },

    {
      "name": "string.quoted.double.zekken",
      "begin": "\"",
      "end": "\""
    },
    {
      "name": "string.quoted.single.zekken",
      "begin": "'",
      "end": "'"
    },

    {
      "name": "meta.array.zekken",
      "begin": "\\[",
      "end": "\\]",
      "patterns": [
        { "include": "#control-flow" },
        { "include": "#function-patterns" },
        { "include": "support" },
        { "include": "#key-value-pair" }
      ]
    },

    {
      "name": "meta.object.zekken",
      "begin": "\\{",
      "end": "\\}",
      "patterns": [
        { "include": "#control-flow" },
        { "include": "#function-patterns" },
        { "include": "support" },
        { "include": "#key-value-pair" }
      ]
    },

    {
      "name": "key-value-pair.zekken",
      "patterns": [
        {
          "name": "variable.other.zekken",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        },
        {
          "name": "constant.language.boolean.zekken",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "constant.numeric.integer.zekken",
          "match": "\\b\\d+\\b"
        },
        {
          "name": "constant.numeric.float.zekken",
          "match": "\\b\\d+\\.\\d+\\b"
        },
        {
          "name": "string.quoted.double.zekken",
          "begin": "\"",
          "end": "\""
        },
        {
          "name": "string.quoted.single.zekken",
          "begin": "'",
          "end": "'"
        }
      ]
    },

    {
      "name": "variable-definition.zekken",
      "patterns": [
        {
          "name": "variable.other.zekken",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
				},
        
        {
          "name": "support.type.zekken support.type.primitive.zekken",
          "match": "\\b(int|float|bool|string|arr|obj|fn)\\b"
        }
      ]
    }
  ],
  "repository": {
    "control-flow": {
      "patterns": [
        {
          "name": "keyword.control.zekken",
          "match": "\\b(if|else|for|while|try|catch|return)\\b"
        }
      ]
    },
    "variable-definition": {
      "patterns": [
        {
          "include": "#storage-types"
        },
        {
          "name": "variable.other.zekken",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "key-value-pair": {
      "patterns": [
        {
          "name": "variable.other.zekken",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        },
        {
          "name": "constant.language.boolean.zekken",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "constant.numeric.integer.zekken",
          "match": "\\b\\d+\\b"
        },
        {
          "name": "constant.numeric.float.zekken",
          "match": "\\b\\d+\\.\\d+\\b"
        },
        {
          "name": "string.quoted.double.zekken",
          "begin": "\"",
          "end": "\""
        },
        {
          "name": "string.quoted.single.zekken",
          "begin": "'",
          "end": "'"
        }
      ]
    },
		"function-patterns": {
      "patterns": [
        {
          "name": "meta.function.declaration.zekken",
          "match": "\\b(func)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\|",
          "captures": {
            "1": { "name": "keyword.other.zekken" },
            "2": { "name": "entity.name.function.zekken" }
          }
        },

        {
          "name": "meta.function.lambda.declaration.zekken",
          "match": "\\b(let|const)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*:\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*->",
          "captures": {
            "1": { "name": "keyword.other.zekken" },
            "2": { "name": "entity.name.function.zekken" },
            "3": { "name": "support.type.primitive.zekken" }
          }
        },
    
        {
          "name": "support.function.builtin.zekken",
          "match": "(?<=@)([a-zA-Z_][a-zA-Z0-9_]*)(?=\\s*=>)",
          "captures": {
            "1": { "name": "keyword.other.zekken" }
          }
        },
    
        {
          "name": "meta.function.call.zekken",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(=>)",
          "captures": {
            "1": { "name": "entity.name.function.zekken" },
            "2": { "name": "keyword.operator.zekken" }
          }
        }
      ]
    }
  },
  "scopeName": "source.zekken"
}